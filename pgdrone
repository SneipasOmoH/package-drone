#! /bin/sh

# set -x   # Debugging on, remove after you've found all of your insects

### BEGIN INIT INFO
# Provides:          pgdrone
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop the package drone drone server
# Description:       Package Drone is a software artifact repository system.
### END INIT INFO

# Author: Michael Poschner <mposchner@on-ergy.de>
# 28.07.2015


# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Provides the package drone server service"
NAME=pgdrone

DAEMON=/usr/lib/package-drone-server/instance/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/pgdrone/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

RUNUSER=pdrone
RUNGROUP=pdrone

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/pgdrone ] && . /etc/default/pgdrone

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
        # Check if the drone is already running ?
        if [ ! -e /var/run/pgdrone ]
	   then	mkdir /var/run/pgdrone
	fi

        if [ -f $PIDFILE ]
	  then
            echo -n "Pidfile exists, the drone is already running! \n"
	exit 1    
        fi

        start-stop-daemon --start --chuid $RUNUSER:$RUNGROUP --background --quiet --pidfile $PIDFILE \
	       	--exec  $DAEMON "$JAVA_OPTS -Dosgi.requiredJavaVersion=1.8 -jar "$DIR"/plugins/org.eclipse.equinox.launcher_*.jar  "$@""   \
		$DAEMON_ARGS \
		|| return 0   
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.

        sleep 10 # Waiting for the service to startup completely

	# Creating the PID-file
	touch $PIDFILE
	export PIDFILE
                PID=$(lsof -Pni | grep pdrone | awk '{print$2}') 
	        export PID	
                echo $PID > /var/run/pgdrone/pgdrone.pid
                echo -n "Starting the package-drone-server \n"
	        echo -n "The drone is running with PID ${PID} \n"
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.   
	# ---> REMOVED:  --retry=0/30/KILL/5 Thinking it's not neccecary...
        echo -n "\n Stopping the package-drone-server \n"

	start-stop-daemon --stop --oknodo --user $RUNUSER --group $RUNGROUP
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	# return "$RETVAL"
	if [ ! -f $PIDFILE ]
	   then echo -n "\n The drone is stopped\n"
           exit 0
	   sleep 2
        fi
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
status)
#        status_of_proc /usr/lib/package-drone-server/instance/$NAME $NAME 
         status_of_proc -p /var/run/pgdrone/pgdrone.pid /usr/lib/package-drone-server/instance/$NAME $NAME
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
